# app.py ‚Äî Streamlit + PyCaret clustering (wersja gotowa na Streamlit Community Cloud)
# ---------------------------------------------------------------
# Najwa≈ºniejsze cechy:
# - Czytelne ≈õcie≈ºki (Pathlib) i przewidywalna struktura katalog√≥w: models/, data/, cfg/
# - Cache modelu: st.cache_resource (kosztowne wczytywanie wykonywane raz)
# - Cache danych i meta: st.cache_data (szybkie, z ‚Äûpodpisem‚Äù modelu, by aktualizowaƒá cache po zmianie .pkl)
# - Naprawa b≈Çƒôdu UnhashableParamError: argument modelu w cache oznaczony jako _model (z podkre≈õleniem)
# - Odporno≈õƒá na brak plik√≥w i brak kolumn w danych
# - Wykresy Plotly z use_container_width

import json                                # do wczytywania nazw/opis√≥w klastr√≥w z pliku JSON
import os                                  # do statystyk plik√≥w (mtime/rozmiar) przy podpisie modelu
from pathlib import Path                   # bezpieczne ≈õcie≈ºki niezale≈ºne od systemu
import streamlit as st                     # framework webowy do budowy aplikacji
import pandas as pd                        # analiza danych tabelarycznych
from pycaret.clustering import load_model, predict_model  # wczytanie i predykcja modelu klastrujƒÖcego
import plotly.express as px                # wykresy interaktywne

# -----------------------
# USTAWIENIA I ≈öCIE≈ªKI
# -----------------------
st.set_page_config(page_title="Rekomendacje grupy (Clustering)", page_icon="üß©", layout="wide")  # konfiguracja strony

ROOT = Path(__file__).parent              # katalog, w kt√≥rym znajduje siƒô app.py
MODELS_DIR = ROOT / "models"              # katalog na modele (np. models/model_4.pkl)
DATA_DIR = ROOT / "data"                  # katalog na dane CSV (np. data/data.csv)
CFG_DIR = ROOT / "cfg"                    # katalog na pliki konfiguracyjne (np. cfg/nazwy_klastrow_4.json)

MODEL_NAME = "model_4"                    # nazwa bazowa modelu (bez rozszerzenia)
DATA_FILE = DATA_DIR / "data.csv"         # nazwa pliku z danymi; oczekiwany separator ';'
CLUSTERS_JSON = CFG_DIR / "nazwy_klastrow_4.json"  # nazwy i opisy klastr√≥w w formacie JSON

# -----------------------
# FUNKCJE CACHE: MODEL
# -----------------------
@st.cache_resource(show_spinner=True)     # cache zasob√≥w ‚Äî idealne do wczytywania kosztownego modelu
def get_model(model_name: str):
    """
    Wczytuje model PyCaret z katalogu models/.
    PyCaret load_model przyjmuje ≈õcie≈ºkƒô bez rozszerzenia .pkl, wiƒôc usuwamy sufiks.
    """
    # Przyk≈Çad: models/model_4 (bez .pkl) ‚Äî PyCaret sam dope≈Çni rozszerzenie podczas wczytywania
    model_path_no_ext = str((MODELS_DIR / model_name).with_suffix(""))
    return load_model(model_path_no_ext)

def get_model_signature(model_name: str) -> str:
    """
    Zwraca 'podpis' modelu (string), aby cache danych od≈õwie≈ºa≈Ç siƒô po podmianie pliku .pkl.
    Wykorzystujemy czas modyfikacji i rozmiar pliku. Je≈õli pliku brak ‚Äî fallback do samej nazwy.
    """
    try:
        pkl_path = (MODELS_DIR / model_name).with_suffix(".pkl")  # np. models/model_4.pkl
        stt = pkl_path.stat()                                     # pobierz statystyki pliku
        return f"{model_name}:{stt.st_mtime_ns}:{stt.st_size}"    # niezmienny, kr√≥tki hash kluczujƒÖcy cache
    except Exception:
        return model_name                                         # awaryjnie sama nazwa

# --------------------------------------------
# FUNKCJE CACHE: META (JSON) + DANE UCZESTNIK√ìW
# --------------------------------------------
@st.cache_data(show_spinner=True)          # szybkie, serializowalne dane ‚Äî idealne do JSON i CSV
def get_cluster_names_and_descriptions(json_path: Path) -> dict:
    """
    Wczytuje s≈Çownik nazw i opis√≥w klastr√≥w z pliku JSON.
    Klucze w JSON zwykle sƒÖ stringami ("0", "1", ...).
    """
    if not json_path.exists():
        st.error(f"Brak pliku z nazwami/obja≈õnieniami klastr√≥w: {json_path}")
        st.stop()
    with open(json_path, "r", encoding="utf-8") as f:
        return json.load(f)

@st.cache_data(show_spinner=True)
def get_all_participants(data_path: Path, _model, model_sig: str) -> pd.DataFrame:
    """
    Wczytuje dane uczestnik√≥w i dokleja im przynale≈ºno≈õƒá do klastra.
    UWAGA 1: _model zaczyna siƒô od '_' ‚Äî Streamlit NIE pr√≥buje go hashowaƒá (naprawa UnhashableParamError).
    UWAGA 2: model_sig to zwyk≈Çy string (hash), wiƒôc cache od≈õwie≈ºa siƒô, gdy zmieni siƒô plik .pkl.
    """
    if not data_path.exists():
        st.error(f"Brak pliku z danymi: {data_path}")
        st.stop()

    # Wczytaj dane ≈∫r√≥d≈Çowe; je≈õli masz polskie znaki ‚Äî UTF-8 jest bezpieczne
    all_df = pd.read_csv(data_path, sep=';', encoding='utf-8')

    # Predykcja klastr√≥w dla ca≈Çego zbioru (predict_model zwraca DF z kolumnƒÖ "Cluster")
    df_with_clusters = predict_model(_model, data=all_df)

    # Walidacja obecno≈õci kolumny "Cluster"
    if "Cluster" not in df_with_clusters.columns:
        st.error("Wynik predict_model nie zawiera kolumny 'Cluster'. Sprawd≈∫ zgodno≈õƒá modelu i danych.")
        st.stop()

    return df_with_clusters

# ------------------------------------------------
# BOCZNY PANEL (SIDEBAR): DANE OSOBY DO PREDYKCJI
# ------------------------------------------------
with st.sidebar:
    st.header("Powiedz nam co≈õ o sobie")                              # nag≈Ç√≥wek w sidebarze
    st.markdown("Pomo≈ºemy Ci znale≈∫ƒá osoby o podobnych zainteresowaniach.")  # opis

    # Uwaga: warto≈õci powinny odpowiadaƒá tym, na kt√≥rych trenowano model (sp√≥jne kategorie!)
    age = st.selectbox("Wiek", ['<18', '18-24', '25-34', '35-44', '45-54', '55-64', '>=65', 'unknown'])
    edu_level = st.selectbox("Wykszta≈Çcenie", ['Podstawowe', '≈örednie', 'Wy≈ºsze'])
    fav_animals = st.selectbox("Ulubione zwierzƒôta", ['Brak ulubionych', 'Psy', 'Koty', 'Koty i Psy', 'Inne'])
    fav_place = st.selectbox("Ulubione miejsce", ['Nad wodƒÖ', 'W lesie', 'W g√≥rach', 'Inne'])
    gender = st.radio("P≈Çeƒá", ['Mƒô≈ºczyzna', 'Kobieta'])

    # Jednowierszowy DataFrame zgodny ze schematem treningowym modelu
    person_df = pd.DataFrame([{
        'age': age,
        'edu_level': edu_level,
        'fav_animals': fav_animals,
        'fav_place': fav_place,
        'gender': gender,
    }])

# ---------------------------
# WCZYTANIE ZASOB√ìW + DANE
# ---------------------------
model = get_model(MODEL_NAME)                                   # wczytaj model (cache_resource => raz na sesjƒô)
model_sig = get_model_signature(MODEL_NAME)                      # wyznacz podpis modelu (mtime/rozmiar pliku .pkl)
cluster_meta = get_cluster_names_and_descriptions(CLUSTERS_JSON) # wczytaj meta klastr√≥w (JSON)
all_df = get_all_participants(DATA_FILE, model, model_sig)       # wczytaj dane + doklej klaster (cache_data)

# ---------------------------------
# PREDYKCJA KLASTRA DLA U≈ªYTKOWNIKA
# ---------------------------------
pred = predict_model(model, data=person_df)                      # predykcja klastra dla formularza z sidebaru
if "Cluster" not in pred.columns:                                # walidacja kolumny
    st.error("Brak kolumny 'Cluster' w wyniku predykcji. Sprawd≈∫ model i wej≈õcie.")
    st.stop()

predicted_cluster_id = pred["Cluster"].values[0]                 # np. 0, 1, 2, ...
predicted_cluster_id_str = str(predicted_cluster_id)             # klucze w JSON to zwykle stringi

# -----------------------
# NAZWA I OPIS KLASTRA
# -----------------------
if predicted_cluster_id_str not in cluster_meta:
    # Gdy w JSON nie ma wpisu dla danego klastra ‚Äî zachowujemy siƒô ≈Çagodnie
    cluster_name = f"Klaster {predicted_cluster_id}"
    cluster_desc = "Brak opisu dla tego klastra. Uzupe≈Çnij plik cfg/nazwy_klastrow_4.json."
else:
    # Pobieramy nazwƒô i opis z JSON (z domy≈õlnymi warto≈õciami na wypadek brak√≥w p√≥l)
    cluster_name = cluster_meta[predicted_cluster_id_str].get("name", f"Klaster {predicted_cluster_id}")
    cluster_desc = cluster_meta[predicted_cluster_id_str].get("description", "Brak opisu dla tego klastra.")

# -----------------------
# PREZENTACJA WYNIK√ìW
# -----------------------
st.header(f"Najbli≈ºej Ci do grupy: {cluster_name}")              # wy≈õwietlamy nazwƒô grupy
st.markdown(cluster_desc)                                        # wy≈õwietlamy opis grupy

# Filtrujemy osoby z takim samym klastrem (uwa≈ºamy na typ por√≥wnania: int vs str)
same_cluster_df = all_df[all_df["Cluster"] == predicted_cluster_id]

# KPI: liczba os√≥b w wybranym klastrze
st.metric("Liczba os√≥b w Twojej grupie", len(same_cluster_df))

# Je≈õli brak danych ‚Äî ko≈Ñczymy uprzejmie
if same_cluster_df.empty:
    st.info("Brak os√≥b w tej grupie (lub brak danych). Dodaj rekordy do data/data.csv.")
    st.stop()

# -----------------------
# WYKRESY (PLOTLY)
# -----------------------
# Uwaga: sprawdzamy istnienie kolumn, by nie wybuchaƒá na brakujƒÖcym polu

if "age" in same_cluster_df.columns:
    # Rozk≈Çad wieku ‚Äî sortowanie po age poprawia czytelno≈õƒá histogramu kategorycznego
    fig = px.histogram(same_cluster_df.sort_values("age"), x="age", title="Rozk≈Çad wieku w grupie")
    fig.update_layout(xaxis_title="Wiek", yaxis_title="Liczba os√≥b")
    st.plotly_chart(fig, use_container_width=True)  # dopasowanie do szeroko≈õci layoutu

if "edu_level" in same_cluster_df.columns:
    fig = px.histogram(same_cluster_df, x="edu_level", title="Rozk≈Çad wykszta≈Çcenia w grupie")
    fig.update_layout(xaxis_title="Wykszta≈Çcenie", yaxis_title="Liczba os√≥b")
    st.plotly_chart(fig, use_container_width=True)

if "fav_animals" in same_cluster_df.columns:
    fig = px.histogram(same_cluster_df, x="fav_animals", title="Rozk≈Çad ulubionych zwierzƒÖt w grupie")
    fig.update_layout(xaxis_title="Ulubione zwierzƒôta", yaxis_title="Liczba os√≥b")
    st.plotly_chart(fig, use_container_width=True)

if "fav_place" in same_cluster_df.columns:
    fig = px.histogram(same_cluster_df, x="fav_place", title="Rozk≈Çad ulubionych miejsc w grupie")
    fig.update_layout(xaxis_title="Ulubione miejsce", yaxis_title="Liczba os√≥b")
    st.plotly_chart(fig, use_container_width=True)

if "gender" in same_cluster_df.columns:
    fig = px.histogram(same_cluster_df, x="gender", title="Rozk≈Çad p≈Çci w grupie")
    fig.update_layout(xaxis_title="P≈Çeƒá", yaxis_title="Liczba os√≥b")
    st.plotly_chart(fig, use_container_width=True)

# --- KONIEC PLIKU ---
